plugins {
    // Supports functionality similar to Maven BOM.
    // Helps to avoid re-declaring dependency version in each subproject.
    // See https://github.com/spring-gradle-plugins/dependency-management-plugin

    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.spotbugs' version '5.0.13' apply false
    id 'com.github.hierynomus.license-report' version '0.15.0'

    id 'com.github.jk1.dependency-license-report' version '2.0'
    id 'com.vanniktech.dependency.graph.generator' version '0.5.0'
    id 'checkstyle'
}

// To enable JavaDoc generation add Gradle property to command line:
// -PincludeJavaDocs

apply plugin: 'base'
apply plugin: "com.github.hierynomus.license-report"
apply from: "$rootDir/gradle/License.gradle"

licenseReport {
    excludeGroups = ['javax.servlet.*']
    excludes = ['com.sun.codemodel:codemodel-project',
                'org.springframework.boot:spring-boot-dependencies',
                'com.fasterxml.jackson:jackson-bom']

    configurations = ['runtimeClasspath']
    allowedLicensesFile = new File("$rootDir/allowed-licenses.json")
}

// We don't want to apply plugins and build artifacts for non-leaf (grouping) projects.
// So we create a list of leaf projects and apply all java-related plugins on them only.
def leafProjects = subprojects.findAll { subproject ->
    subproject.subprojects.empty
}

// Spotbugs
def enableSpotbugs = hasProperty("spotbugs") || Boolean.getBoolean("spotbugs") || Boolean.parseBoolean(System.getenv('SPOTBUGS'))
if (enableSpotbugs) {
    println("Spotbugs is ENABLED")
}

configure(leafProjects) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    //apply plugin: 'com.github.spotbugs' // Static Code analysis
    apply plugin: 'signing'
    //apply plugin: 'checkstyle'

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs += '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
    compileJava.options.compilerArgs += '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    compileJava.options.compilerArgs += '--add-exports=java.desktop/sun.swing=ALL-UNNAMED'
    compileJava.options.compilerArgs += '--add-exports=java.desktop/com.sun.java.swing.plaf.windows=ALL-UNNAMED'
    compileTestJava.options.compilerArgs += '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
    compileTestJava.options.compilerArgs += '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'

    sourceCompatibility = 11
    targetCompatibility = 11

    buildscript {
        repositories {
            mavenCentral()
        }
    }

    repositories {
        mavenCentral()
    }

    configurations.all {
        resolutionStrategy {
            // Disable this line on case of version conflict and then run :dependency task OR execute build with --scan option
            //failOnVersionConflict()
        }

        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api' // GNU license
    }

    dependencies {
        implementation ("com.epam.deltix:gflog-core")

        testImplementation group: "junit", name: "junit", version: "4.13.2"
    }

    dependencyManagement {
        dependencies {
            dependencySet(group: 'com.epam.deltix', version: "$gflog_version") {
                entry 'gflog-api'
                entry 'gflog-core'
                entry 'gflog-jul'
                entry 'gflog-dcl'
                entry 'gflog-slf4j'
            }

            dependency 'com.epam.deltix:value-types:0.9.3'
            dependency 'com.epam.deltix:thread-affinity:1.0.4'
            dependency 'com.epam.deltix:containers:3.1.2'
            dependency 'com.epam.deltix:hd-date-time:0.2.11'

            dependency group: 'com.epam.deltix', name: 'dfp', version: "${dfp_version}"

            dependencySet(group: 'com.epam.deltix', version: "${timebase_commons_version}" ) {
                entry 'timebase-collections'
                entry 'timebase-messages'
                entry 'timebase-lang'
                entry 'timebase-util'
            }

            dependencySet(group: 'org.finos.timebase-ce', version: "${timebase_client_version}") {
                entry 'timebase-aerondirect'
                entry 'timebase-api'
                entry 'timebase-client'
                entry 'timebase-commons'
                entry 'timebase-pub'
            }

            dependency 'org.springframework:spring-jdbc:5.0.20.RELEASE'

            dependency 'com.clickhouse:clickhouse-jdbc:0.4.6'

            dependency 'org.apache.commons:commons-lang3:3.7'

            dependency 'org.apache.commons:commons-compress:1.21'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.commons:commons-math3:3.6'
            dependency 'org.apache.commons:commons-text:1.10.0'
            dependency 'commons-codec:commons-codec:1.13'

            dependency 'org.hdrhistogram:HdrHistogram:2.1.12'

            dependency 'javax.annotation:javax.annotation-api:1.3.2'

            dependency 'junit:junit:4.13.2'

            dependencySet(group: 'org.springframework.boot', version: '2.7.1') {
                entry 'spring-boot-starter'
                entry 'spring-boot-starter-web'
                entry 'spring-boot-starter-websocket'
                entry 'spring-boot-starter-actuator'
                entry 'spring-boot-configuration-processor'
                entry 'spring-boot-starter-validation'
            }

        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}